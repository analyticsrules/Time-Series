

##### 1.  LOADING AND CONVERTING DATA INTO TIME SERIES FORMAT ###############################

kings = scan("http://robjhyndman.com/tsdldata/misc/kings.dat", skip=3)
kingsTimeSeries = ts(kings)
kingsTimeSeries

 #Sometimes the time series data set that you have may have been collected at regular intervals that were less than
 #one year, for example, monthly or quarterly. In this case, you can specify the number of times that data was
 #collected per year by using the ‘frequency’ parameter in the ts() function. For monthly time series data, you set
 #frequency=12, while for quarterly time series data, you set frequency=4.

births = scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
head(births)
 #births data is monthly basis collected starting Jan 1946
birthsTS = ts(births, frequency= 12, start = c(1946,1))
 #here we've taken start = c(1946,1) bcz 1st data was collected in the 1st quarter of 1946. It's starting point
 #If the 1st data were collected in 3rd quarter of 1946, then we'd have used start = c(1946,3)

 #Souvenir data is monthly basis collected starting Jan 1987
souvenir = scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
souvenirTS =ts(souvenir, frequency=12, start= c(1987,1))
souvenirTS


######  2.  PLOTTING THE TIME SERIES DATA    ###########################################

plot.ts(kingsTimeSeries)
 #the time plot that this time series could probably be described using an additive model, since the
 #random fluctuations in the data are roughly constant in size over time.

plot.ts(birthsTS)
 #Here we can see that there is seasonal variation in in the no. of births per month.#Birth seem to be peak
 #in summer and trough in winter. Seosonal fluctuations are roughly contstant in size over time. It could be
 #described via ADDITIVE MODEL

plot.ts(souvenirTS)
 #Here size of random fluctuation seems to be increasing over time. Lets transform it using log
LOGsouvenirTS = log(souvenirTS)
plot.ts(LOGsouvenirTS)
 #Here we can see that the size of the seasonal fluctuations and random fluctuations in the log-transformed time
 #series seem to be roughly constant over time, and do not depend on the level of the time series. Thus, the logtransformed
 #time series can probably be described using an ADDITIVE MODEL




############   3.  DECOMPOSING TIME-SERIES DATA    ############################################

#Decomposing time-series means decomposing it into 
 # A) trend component, 
 # B) irregular component (residuals) 
 # C)and seasonal component (if the data is seasonal time-series)



##Decomposing non-seasonal time-series data

 #TTR packages contains the smooting function SMA() i.e. simple moving average
library(TTR)
kingsTimeSeriesSMA3 = SMA(kingsTimeSeries, n=3)
 #HEre we're taking moving average of order 3. for kth element, we'll take average of k, k-1 & k-2

plot.ts(kingsTimeSeriesSMA3)
 #THere doesnt seem to be a clear pattern with order 3, lets take n=8

kingsTimeSeriesSMA8 = SMA(kingsTimeSeries, n=8)
plot.ts(kingsTimeSeriesSMA8)
 #The data smoothed with a simple moving average of order 8 gives a clearer picture of the trend component, and
 #we can see that the age of death of the English kings seems to have decreased from about 55 years old to about 38
 #years old during the reign of the first 20 kings, and then increased after that to about 73 years old by the end of the
 #reign of the 40th king in the time series.



###  DECOMPOSING SEASONAL TIME SERIES DATA

 #We can decompose seasonal data into trend, irregular & seasonal components using decompose() function
birthsTSComponents = decompose(birthsTS)

birthsTSComponents$seasonal
 #The largest seasonal factor is for July (about 1.46), and the lowest is for February (about -2.08), indicating that there
 #seems to be a peak in births in July and a trough in births in February each year.
plot(birthsTSComponents)



## SEASONALLY ADJUSTING

#If we have a seasonal time series that can be described using an additive model, you can seasonally adjust the
#time series by estimating the seasonal component, and subtracting the estimated seasonal component from the
#original time series.

birthsTSComponents = decompose(birthsTS) #Estimating seasonal component
birthsTSSeasonallyAdjusted = birthsTS - birthsTSComponents$seasonal   #subtracting SeasCom from time series data
plot(birthsTSSeasonallyAdjusted)  #Plotting the seasonally adjusted data
 #Now we see that seasonal variation has been removed from seasonally adjusted time series. it contains only
 #trend & irregular components
